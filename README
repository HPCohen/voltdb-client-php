###################
# 1. Introduction #
###################

The VoltDB PHP wrapper lets you connect to and interact with VoltDB servers from PHP. Most of the code for this wrapper
is generated automatically from the C++ client library code using SWIG.

This is the overall build process that this package manages:

  --------------          ---------------         ---------------
  | C++ client |  (SWIG)  | PHP wrapper |  (g++)  | PHP wrapper |
  |  library   |--------->|    source   |-------->|  extension  |
  --------------          ---------------         ---------------

The repository contains pre-generated PHP wrapper source so that you don't have to install and run SWIG yourself.

########################
# 2. Required Software #
########################

The following software is required for both end-users and developers:

  * PHP
    http://php.net/
    Install PHP as well as the php-devel package which allows you to compile your own PHP extensions.

  * VoltDB C++ Client Library
    https://svn.voltdb.com/clientapi/cpp/
    Do a checkout of this repository and build it.

  * OpenSSL
    http://www.openssl.org/
    Refer to the VoltDB C++ Client Library README for installation details.

  * libevent 2.0.5
    http://www.monkey.org/~provos/libevent/
    Refer to the VoltDB C++ Client Library README for installation details.

  * Boost C++ Libraries
    http://www.boost.org/
    Refer to the VoltDB C++ Client Library README for installation details.

########################
# 3. Optional Software #
########################

The following software is optional for end-users, but required for developers:

  * VoltDB
    https://svn.voltdb.com/eng/
    The core VoltDB project is used to start VoltDB servers to run unit tests against.

  * PHPUnit
    http://www.phpunit.de/
    PHPUnit is used to run PHP unit tests.

  * Xdebug
    http://www.xdebug.org/
    Xdebug is used to generate code coverage reports.

  * SWIG
    http://www.swig.org/
    SWIG is used to generate the PHP wrapper source.

###################
# 4. Installation #
###################

The build depends on other libraries, so it needs to know where they are installed. This information is read from a file
called library.properties. A stub version exists inside source control to get you started:

    cp library.properties.empty library.properties

Now edit the library.properties file to contain the correct locations on your system. Your file will end up looking
something like this:

    lib.voltcpp=${user.home}/clientapi/cpp/trunk/Library Release
    lib.event=${user.home}/lib
    lib.voltdb=${user.home}/voltdb

With that done, simply run ant without any arguments from the root directory. It will do its thing for some time and if
it succeeds, a dist directory will be created and it will contain two files, voltdb.so and voltdb.php.

To get PHP to recognize the new extension, it needs to know where to find voltdb.so. Edit your php.ini file to include
this line:

    extension=${path.to.voltphp}/trunk/dist/voltdb.so

Where ${path.to.voltphp} is where you checked this repository out to. Alternatively, you could move or symlink voltdb.so
to PHP's default extension directory and not have to list a full path.

Note that if you are running PHP through a web server such as Apache (instead of command line), you will have to
restart/reload the server for the new php.ini changes to take effect.

##############
# 5. Running #
##############

With the extension loaded into PHP, include the dist/voltdb.php file at the top of your script. This file contains proxy
classes for interacting with a VoltDB server. Look at the examples directory to see how to use the PHP wrapper.

#################
# 6. Bugs/TODOs #
#################

This wrapper is still in its development phase, so a few features are not fully supported. This includes:

  * Parameters arrays
    Arrays of parameters are supported using vector wrappers, but they aren't tested.

  * int64_t and Decimal
    int64_t doesn't work because PHP doesn't support 64-bit integers. Decimal isn't tested.

  * Retrieving results
    When extracting data out of an InvocationResponse object, you must explicitly create a variable to hold the results
    object. For example, this is valid:

        $results = $response->results();
        $row = $results->get(0)->iterator()->next();

    Whereas this is not:

        $row = $response->results()->get(0)->iterator()->next();

    If you chain the method calls together like above, the variable returned by results() gets garbage collected too
    early. See CLIENTAPI-15 for the progress of this bug.
